QVector3D CameraBase::unproject(qint32 x, qint32 y, float z)
{
    QVector4D v4(x,viewport.height() - y,2.0f*z-1.0f,1.0f);
    QVector4D res = getViewProjectionViewportMatrixInv() * v4;
    res/=res.w();
    return res.toVector3DAffine();
}

QPoint CameraBase::project(const QVector3D &pos)
{
    QVector4D res = getViewProjectionViewportMatrix() * pos;
    return QPoint(res.x(), viewport.height() - res.y());
}

void CameraBase::setViewport(qint32 l, qint32 t, qint32 w, qint32 h)
{
    viewport = QRectF(l,t,w,h);
    float w2 = float(w) / 2;
    float h2 = float(h) / 2;
    viewportMatrix.setToIdentity();
    viewportMatrix.setColumn(0,QVector4D(w2,0.0f,0.0f,0.0f));
    viewportMatrix.setColumn(1,QVector4D(0.0f,h2,0.0f,0.0f));
    viewportMatrix.setColumn(2,QVector4D(0.0f,0.0f,1.0f,0.0f));
    viewportMatrix.setColumn(3,QVector4D(w2,h2,0.0f,1.0f));
}

void CameraBase::updateProjectionMatrix()
{
    projectionMatrix.setToIdentity();
    projectionMatrix.scale(-1,1,1);

    float aspectRatio = viewport.width() / viewport.height();
    projectionMatrix.perspective(45, aspectRatio, nearp, farp);
}